@function is-px($val) {
  @if (type_of($val) != 'number') {
    @return false;
  }

  @if (unit($val) == 'px') {
    @return true;
  }

  @return false;
}

@function mq-px2rem($px, $base-font-size: $mq-base-font-size) {
  @if unitless($px) {
    @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels.";
    @return mq-px2rem($px * 1px, $base-font-size);
  } @else if unit($px) == rem {
    @return $px;
  }
  @return ($px / $base-font-size) * 1rem;
}

@function px2vw($px, $width: 1440px) {
  @return (($px / $width) * 100) * 1vw;
}

@function mobile-px2vw($px, $width: 375px) {
  @return (($px / $width) * 100) * 1vw;
}

@function mobile-px2rem($px, $base-font-size: 11px) {
  @if unitless($px) {
    @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels.";
    @return mobile-px2rem($px * 1px, $base-font-size);
  } @else if unit($px) == rem {
    @return $px;
  }
  @return ($px / $base-font-size) * 1rem;
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

@mixin from-desktop() {
  @include mq($from: design) {
    @content;
  }
}

@mixin until-phablet() {
  @include mq($until: phablet-next) {
    @content;
  }
}

@mixin until-mobile() {
  @include mq($until: mobile-next) {
    @content;
  }
}

@function has-important($arg) {
  $count: length($arg);
  @each $part in $arg {
    @if ($part == '!important') {
      @return '!important';
    }
  }

  @return '';
}

@mixin _px($args...) {
  @each $tuple in $args {
    $count: (length($tuple) - 1);
    $important: has-important($tuple);
    @if ($important != '') {
      $count: ($count - 1);
    }

    $val: nth($tuple, 2);

    @if(is-px($val)) {
      #{nth($tuple,1)}: px2vw($val) #{$important};
    } @else {
      #{nth($tuple,1)}: #{$val} #{$important};
    }

    @include mq($from: design) {
        #{nth($tuple,1)}: nth($tuple, 2) #{$important};
    }

    @if ($count > 2) {
      $phab-val: nth($tuple, 3);
      $mobile-val: nth($tuple, 4);

      @include mq($until: iphone-xs) {
        @if(is-px($mobile-val)) {
          #{nth($tuple,1)}: mobile-px2vw($mobile-val) #{$important};
        } @else {
          #{nth($tuple,1)}: #{$mobile-val} #{$important};
        }
      }

      @include mq($from: iphone-xs, $until: phablet-next) {
        @if(is-px($phab-val)) {
          #{nth($tuple,1)}: mobile-px2vw($phab-val) #{$important};
        } @else {
          #{nth($tuple,1)}: #{$phab-val} #{$important};
        }
      }
    } @else {
      @if($count > 1) {
        $val: nth($tuple, 3);
      }

      @include mq($until: phablet-next) {
        @if(is-px($val)) {
          #{nth($tuple,1)}: mobile-px2vw($val) #{$important};
        } @else {
          #{nth($tuple,1)}: #{$val} #{$important};
        }
      }
    }
  }
}


@function build-transform($arg, $fluid: false, $phablet: false, $mobile: false) {
  $transform: nth($arg, 1);

  $count: length($arg) - 1;
  $important: has-important($arg);
  @if ($important !='') {
    $count: ($count - 1);
  }

  $val: nth($arg, 2);

  @if ($fluid) {
    @if (is-px($val)) {
      $val: px2vw($val);
    }
  }
  @else if($phablet) {
    @if($count > 1) {
      $val: nth($arg, 3);
    }

    @if (is-px($val)) {
      $val: mobile-px2vw($val);
    }
  }
  @else if ($mobile) {
    @if($count > 2) {
      $val: nth($arg, 4);
    } @else if ($count > 1) {
      $val: nth($arg, 3);
    }

    @if (is-px($val)) {
      $val: mobile-px2vw($val);
    }
  }

  @return unquote('#{$transform}(#{$val}) #{$important}');
}

@mixin _transform($args...) {
  $transforms: ();
  $desktop-transforms: ();
  $phablet-transforms: ();
  $mobile-transforms: ();

  @each $arg in $args {
    $transforms: append($transforms, build-transform($arg, true, false, false), space);
    $desktop-transforms: append($desktop-transforms, build-transform($arg, false, false, false), space);
    $phablet-transforms: append($phablet-transforms, build-transform($arg, false, true, false), space);
    $mobile-transforms: append($mobile-transforms, build-transform($arg, false, false, true), space);
  }

  transform: $transforms;

  @include mq($from: design) {
    transform: $desktop-transforms;
  }

  @include mq($until: iphone-xs) {
    transform: $mobile-transforms;
  }

  @include mq($from: iphone-xs, $until: phablet-next) {
    transform: $phablet-transforms;
  }
}

@mixin _rem($font-size...) {
  $count: length($font-size);
  $important: '';

  @each $size in $font-size {
    @if ($size == '!important') {
      $important: '!important';
    }
  }

  @if ($important != '') {
    $count: ($count - 1);
  }

  font-size: mq-px2rem(nth($font-size, 1)) #{$important};

  @if ($count == 2) {
    @include mq($until: iphone-xs) {
      font-size: mq-px2rem(nth($font-size, 2), $mobile-font-size) #{$important};
    }

    @include mq($from: iphone-xs, $until: phablet-next) {
      font-size: mq-px2rem(nth($font-size, 2), $mobile-font-size) #{$important};
    }
  }

  @if ($count == 3) {
    @include mq($until: iphone-xs) {
      font-size: mq-px2rem(nth($font-size, 3), $mobile-font-size) #{$important};
    }

    @include mq($from: iphone-xs, $until: phablet-next) {
      font-size: mq-px2rem(nth($font-size, 2), $mobile-font-size) #{$important};
    }
  }
}